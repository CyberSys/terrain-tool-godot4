[gd_resource type="ShaderMaterial" load_steps=59 format=2]

[ext_resource path="res://addons/TerrainPlugin/Shader/VisualShaderNodeTerrainGenerator3D.gd" type="Script" id=1]
[ext_resource path="res://TestTextures/Pave/PavingStones046_2K_Displacement.jpg" type="Texture2D" id=2]
[ext_resource path="res://addons/TerrainPlugin/Shader/VisualShaderNodeDepthBlending3D.gd" type="Script" id=3]
[ext_resource path="res://addons/TerrainPlugin/Shader/VisualShaderNodeTextureUnpack3D.gd" type="Script" id=4]
[ext_resource path="res://addons/TerrainPlugin/Shader/VisualShaderNodeAntiTiling3D.gd" type="Script" id=5]
[ext_resource path="res://addons/TerrainPlugin/Shader/VisualShaderNodeUVMultiply3D.gd" type="Script" id=6]
[ext_resource path="res://TestTextures/Grass/Ground037_2K_Color.jpg" type="Texture2D" id=7]
[ext_resource path="res://TestTextures/Grass/Ground037_2K_Displacement.jpg" type="Texture2D" id=8]
[ext_resource path="res://TestTextures/Grass/Ground037_2K_Normal.jpg" type="Texture2D" id=9]
[ext_resource path="res://TestTextures/Grass/Ground037_2K_AmbientOcclusion.jpg" type="Texture2D" id=10]
[ext_resource path="res://TestTextures/Grass/Ground037_2K_Roughness.jpg" type="Texture2D" id=11]
[ext_resource path="res://TestTextures/Sandy/Ground022_2K_Normal.jpg" type="Texture2D" id=12]
[ext_resource path="res://TestTextures/Sandy/Ground022_2K_Color.jpg" type="Texture2D" id=13]
[ext_resource path="res://TestTextures/Sandy/Ground022_2K_Displacement.jpg" type="Texture2D" id=14]
[ext_resource path="res://TestTextures/Sandy/Ground022_2K_AmbientOcclusion.jpg" type="Texture2D" id=15]
[ext_resource path="res://addons/TerrainPlugin/Shader/VisualShaderNodeSplatmapHeight3D.gd" type="Script" id=16]
[ext_resource path="res://TestTextures/Sandy/Ground022_2K_Roughness.jpg" type="Texture2D" id=17]
[ext_resource path="res://TestTextures/Pave/PavingStones046_2K_Color.jpg" type="Texture2D" id=18]
[ext_resource path="res://TestTextures/Pave/PavingStones046_2K_Normal.jpg" type="Texture2D" id=19]
[ext_resource path="res://TestTextures/Pave/PavingStones046_2K_AmbientOcclusion.jpg" type="Texture2D" id=20]
[ext_resource path="res://TestTextures/Pave/PavingStones046_2K_Roughness.jpg" type="Texture2D" id=21]
[ext_resource path="res://addons/TerrainPlugin/Shader/VisualShaderNodeTerrainMaterial3D.gd" type="Script" id=22]

[sub_resource type="VisualShaderNodeTextureUniform" id=1]
default_input_values = [  ]
uniform_name = "Layer2_Dis"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=2]
default_input_values = [  ]
uniform_name = "Layer2"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=3]
default_input_values = [  ]
uniform_name = "Layer3_Dis"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=4]
default_input_values = [  ]
uniform_name = "Layer0"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=5]
default_input_values = [  ]
uniform_name = "Layer0_Normal"
texture_type = 2

[sub_resource type="VisualShaderNodeTextureUniform" id=6]
default_input_values = [  ]
uniform_name = "Layer1_Disp"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=7]
default_input_values = [  ]
uniform_name = "Layer0_Dis"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=8]
default_input_values = [  ]
uniform_name = "Layer2_Normal"
texture_type = 2

[sub_resource type="VisualShaderNodeInput" id=9]
default_input_values = [  ]
input_name = "uv"

[sub_resource type="VisualShaderNodeTextureUniform" id=10]
default_input_values = [  ]
uniform_name = "Layer0_Roughnes"
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id=11]
default_input_values = [ 0, Vector3( 10, 10, 0 ) ]
script = ExtResource( 6 )

[sub_resource type="VisualShaderNodeTextureUniform" id=12]
default_input_values = [  ]
uniform_name = "Layer0_AO"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=13]
default_input_values = [  ]
uniform_name = "Layer1_Normal"
texture_type = 2

[sub_resource type="VisualShaderNodeTextureUniform" id=14]
default_input_values = [  ]
uniform_name = "Layer1_Roughness"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=15]
default_input_values = [  ]
uniform_name = "Layer1"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=16]
default_input_values = [  ]
uniform_name = "Layer1_AO"
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id=17]
default_input_values = [ 0, Vector3( 20, 20, 0 ) ]
script = ExtResource( 6 )

[sub_resource type="VisualShaderNodeCustom" id=18]
default_input_values = [ 0, Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 ) ]
script = ExtResource( 4 )

[sub_resource type="VisualShaderNodeCustom" id=19]
default_input_values = [ 0, Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 ), 1, Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 ), 2, 0.5, 3, 0.05, 4, false ]
script = ExtResource( 3 )

[sub_resource type="VisualShaderNodeCustom" id=20]
default_input_values = [  ]
script = ExtResource( 16 )

[sub_resource type="VisualShaderNodeCustom" id=21]
default_input_values = [ 5, Vector3( 0, 0, 0 ), 6, 0.5, 7, 1.0, 8, 0.0 ]
script = ExtResource( 5 )

[sub_resource type="VisualShaderNodeCustom" id=22]
default_input_values = [ 5, Vector3( 0, 0, 0 ), 6, 0.5, 7, 1.0, 8, 0.0 ]
script = ExtResource( 5 )

[sub_resource type="VisualShaderNodeVectorDecompose" id=23]
default_input_values = [ 0, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeCustom" id=24]
default_input_values = [ 0, Vector3( 20, 20, 0 ) ]
script = ExtResource( 6 )

[sub_resource type="VisualShaderNodeCustom" id=25]
default_input_values = [ 5, Vector3( 0, 0, 0 ), 6, 0.5, 7, 1.0, 8, 0.0 ]
script = ExtResource( 5 )

[sub_resource type="VisualShaderNodeTextureUniform" id=26]
default_input_values = [  ]
uniform_name = "Layer3"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=27]
default_input_values = [  ]
uniform_name = "Layer2_Dis2"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=28]
default_input_values = [  ]
uniform_name = "Layer2_Normal2"
texture_type = 2

[sub_resource type="VisualShaderNodeTextureUniform" id=29]
default_input_values = [  ]
uniform_name = "Layer2_Roughnes2"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=30]
default_input_values = [  ]
uniform_name = "Layer2_AO"
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id=31]
default_input_values = [ 0, Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 ), 1, Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 ), 2, 0.5, 3, 0.05, 4, false ]
script = ExtResource( 3 )

[sub_resource type="VisualShaderNodeCustom" id=32]
default_input_values = [  ]
script = ExtResource( 22 )

[sub_resource type="VisualShaderNodeFloatOp" id=33]
default_input_values = [ 0, 0.0, 1, 1.8 ]
operator = 2

[sub_resource type="VisualShaderNodeFloatConstant" id=36]
default_input_values = [  ]
constant = 1.2

[sub_resource type="VisualShaderNodeCustom" id=34]
default_input_values = [  ]
script = ExtResource( 1 )

[sub_resource type="VisualShader" id=35]
code = "shader_type spatial;
render_mode depth_draw_always, specular_schlick_ggx;

uniform sampler2D Layer0 : hint_albedo;
uniform sampler2D Layer0_Dis : hint_albedo;
uniform sampler2D Layer0_Normal : hint_normal;
uniform sampler2D Layer0_Roughnes : hint_albedo;
uniform sampler2D Layer0_AO : hint_albedo;
uniform sampler2D Layer1 : hint_albedo;
uniform sampler2D Layer1_Disp : hint_albedo;
uniform sampler2D Layer1_Normal : hint_normal;
uniform sampler2D Layer1_Roughness : hint_albedo;
uniform sampler2D Layer1_AO : hint_albedo;
uniform sampler2D Layer3 : hint_albedo;
uniform sampler2D Layer2_Dis2 : hint_albedo;
uniform sampler2D Layer2_Normal2 : hint_normal;
uniform sampler2D Layer2_Roughnes2 : hint_albedo;
uniform sampler2D Layer2_AO : hint_albedo;


// TerrainGenerator3D


		uniform vec4 terrainUvScale;
		uniform vec2 terrainUvOffset;
		uniform sampler2D terrainHeightMap;

		uniform float terrainChunkSize = 0;
		uniform float terrainNextLodChunkSize = 0;
		uniform float terrainNeighborLodLevel = 0;
		uniform float terrainCurrentLodLevel = 0;
		uniform bool terrainSmoothing = false;
		
		uniform sampler2D terrainSplatmap1 : hint_albedo;
		uniform sampler2D terrainSplatmap2 : hint_albedo;
		uniform bool terrainSplatMapDebug = false;

		float calculateLOD(bool _smoothing, float _currentLod, float _neighborLod, vec2 xy, vec4 morph)
		{
			if(_smoothing)
			{
				// Use LOD value based on Barycentric coordinates to morph to the lower LOD near chunk edges
				vec4 lodCalculated = morph * _currentLod + _neighborLod * (vec4(1, 1, 1, 1) - morph);

				// Pick a quadrant (top, left, right or bottom)
				float lod;
				if ((xy.x + xy.y) > 1.0)
				{
					if (xy.x < xy.y)
					{
						lod = lodCalculated.w;
					}
					else
					{
						lod = lodCalculated.z;
					}
				}
				else
				{
					if (xy.x < xy.y)
					{
						lod = lodCalculated.y;
					}
					else
					{
						lod = lodCalculated.x;
					}
				}

				return lod;
			}
			else
				return _currentLod;
		}

		mat3 CalcTangentBasisFromWorldNormal(vec3 normal)
		{
			vec3 tangent = cross(normal, vec3(1, 0, 0));
			vec3 bitangent = cross(normal, tangent);
			return mat3(tangent, bitangent, normal);
		}

		vec4 getHeightmap(vec2 uv, vec4 uv_scale, sampler2D heightmap, float currentLODLevel){

			vec2 heightmapUVs = uv * uv_scale.xy + uv_scale.zw;
			return textureLod(heightmap, heightmapUVs, currentLODLevel);
		}

		float getHeight(vec4 heightmapValue)
		{
			int heightR = int((heightmapValue.x * 255.0));
			int heightG = int((heightmapValue.y * 255.0)) << 8;

			int sum = heightR + heightG;
			return float(sum) / 65535.0;
		}

		vec3 getNormal(vec4 heightmapValue)
		{
			vec2 normalTemp = vec2(heightmapValue.b, heightmapValue.a) * 2.0f - 1.0f;

			float c = clamp(dot(normalTemp, normalTemp), 0.0, 1.0);
			vec3 normal = vec3(normalTemp.x, sqrt(1.0 -c), normalTemp.y);
			bool isHole = (heightmapValue.b + heightmapValue.a) >= 1.9f;

			if (isHole)
			{
				normal = vec3(0, 1, 0);
			}
			
			normal = normalize(normal);
			mat3 tangents  = CalcTangentBasisFromWorldNormal(normal);

			return tangents[2];
		}

		vec3 getPosition(float _terrainChunkSize, float _terrainCurrentLodLevel, float _terrainNeighborLodLevel, bool _smoothing, float _terrainNextLodChunkSize, vec4 color, vec2 uv)
		{
			float lodValue = _terrainCurrentLodLevel;
			vec2 positionXZ = vec2(0,0);

			if(_smoothing)
			{		
					float lodCalculated = calculateLOD(_smoothing, _terrainCurrentLodLevel, _terrainNeighborLodLevel, uv, color);

					vec2 nextLODPos = round(uv * _terrainNextLodChunkSize) / _terrainNextLodChunkSize;
					float morphAlpha = lodCalculated - _terrainCurrentLodLevel;

					vec2 positionXZThisLOD = uv * _terrainChunkSize;
					vec2 positionXZNextLOD = nextLODPos * _terrainChunkSize;
					positionXZ = mix(positionXZThisLOD, positionXZNextLOD, morphAlpha);
			}
			else {
				positionXZ = uv * _terrainChunkSize;
			}
			
			return vec3(positionXZ.x, 0f, positionXZ.y);
		
		//	VERTEX = position;
		//	NORMAL = triangles[2];

		//	UV =  positionXZ * (1.0f / _terrainChunkSize) + OffsetUV;
		}


	
// UVMultiply3D

	
	
// AntiTiling3D

		float rand(vec2 input) {
			return fract(sin(dot(input.xy, vec2(12.9898,78.233))) * 43758.5453123);
		}

		vec2 rotatedUV(vec2 uv, float tiling, float randomize_rotation)
		{
			vec2 tiled_UV_raw = uv * tiling;
			vec2 tiled_UV = fract(tiled_UV_raw) - 0.5f;
			
			vec2 unique_val = floor(uv * tiling) / tiling;
			float rotation = (rand(unique_val) * 2.0f - 1.0f) * randomize_rotation * 3.14f;
			float cosine = cos(rotation);
			float sine = sin(rotation);
			mat2 rotation_mat = mat2(vec2(cosine, -sine), vec2(sine, cosine));
			return rotation_mat * tiled_UV + 0.5f;
		}
		
	
// SplatmapHeight3D


		vec4 getSplatmap(vec2 uv, vec4 uv_scale, sampler2D heightmap, float currentLODLevel){
			vec2 heightmapUVs = uv * uv_scale.xy + uv_scale.zw;
			return textureLod(heightmap, heightmapUVs, currentLODLevel);
		}
		
	
// DepthBlending3D


		vec3 HeightBlend(float blending, vec3 input1, float height1, vec3 input2, float height2)
		{
			float height_start = max(height1, height2) - blending;
			float b1 = max(height1 - height_start, 0f);
			float b2 = max(height2 - height_start, 0f);
			return ((input1 * b1) + (input2 * b2)) / (b1 + b2);
		}

		vec3 HeightLerp(float blending, vec3 input1, float height1, vec3 input2, float height2, float lerp)
		{
			return HeightBlend(blending, input1, height1 * (1f - lerp), input2, height2 * lerp);
		}

	
// TextureUnpack3D

	
	
// TerrainMaterial3D


		uniform vec4 BrushData0;
		uniform vec4 BrushData1;
		uniform vec4 BrushColor	 : hint_color;

		uniform sampler2D terrainDefaultMaterial : hint_albedo;


		vec3 genInspectorHighliteTerrain(vec4 brushColor, vec4 brushData0, vec4 brushData1, mat4 CAMMATRIX, vec3 vertexLocal)
		{
			float n_out12p0 = 0.000000;
			mat4 n_out6p0 =  CAMMATRIX;
			vec3 n_out7p0 = vertexLocal;
			vec3 n_out8p0 = (n_out6p0 * vec4(n_out7p0, 1.0)).xyz;

			vec3 n_out2p0 = BrushData0.rgb;
			float n_out2p1 = BrushData0.a;

			float n_out4p0 = distance(n_out8p0, n_out2p0);

			vec3 n_out3p0 = BrushData1.rgb;
			float n_out3p1 = BrushData1.a;

			float n_out10p0 = n_out3p0.x;
			float n_out10p1 = n_out3p0.y;
			float n_out10p2 = n_out3p0.z;

			float n_out9p0;
			n_out9p0 = 0.0;
			{
				float dist = n_out4p0;
				float radius = n_out2p1;
				float falloff = n_out10p0;
				float falloffType = n_out10p1;
				
				// Output0 = brush intensity
				n_out9p0 = 0f;
				
				if (dist < radius)
				{
					n_out9p0 = 1f;
				}
				else if (dist < radius + falloff)
				{
					float valueLinear = mix(1, 0, (dist - radius) / falloff);
					if (falloffType == 0f) // Smooth
						n_out9p0 = valueLinear * valueLinear * (3f - 2f * valueLinear);
					else if (falloffType == 1f) // Linear
						n_out9p0 = valueLinear;
					else if (falloffType == 2f) // Spherical
						n_out9p0 = sqrt(1.0f - ((dist - radius) / falloff) * (dist - radius) / falloff);
					else if (falloffType == 3f) // Tip
						n_out9p0 = 1.0f - sqrt(1.0f - ((falloff + radius - dist) / falloff) * (falloff + radius - dist) / falloff);
				}
				
			}

			float n_in11p1 = 0.20000;
			float n_out11p0 = mix(n_out12p0, n_in11p1, n_out9p0);

			vec3 n_out16p0 = vec3(0.968750, 1.000000, 0.000000);
			float n_out16p1 = 1.000000;

			float n_out15p0;
			n_out15p0 = 0f;
			{
				float Width = 7.0f;
				if (abs(n_out4p0) < Width || abs(n_out4p0 - n_out2p1) < Width)
					n_out15p0 = 1f;
				else if (abs(n_out4p0 - n_out2p1 - n_out10p0) < Width)
					n_out15p0 = 1f;
				else
					n_out15p0 = 0f;
				
			}

			float n_out19p0 = mix(n_out11p0, n_out16p1, n_out15p0);

			vec3 n_out13p0 = brushColor.rgb;
			float n_out13p1 = brushColor.a;

			float n_out20p0 = n_out19p0 * n_out13p1;

			vec3 n_out18p0 = vec3(n_out15p0, n_out15p0, n_out15p0);
			vec3 n_out17p0 = mix(n_out13p0, n_out16p0, n_out18p0);
			vec3 n_out22p0 = vec3(n_out13p1, n_out13p1, n_out13p1);

			vec3 n_out21p0 = n_out17p0 * n_out22p0;
			return mix(vec3(0f,0f,0f), n_out21p0, n_out20p0);
		}

	

void vertex() {
// TerrainGenerator3D:2
	vec3 n_out2p0;
	float n_out2p1;
	vec3 n_out2p2;
	float n_out2p3;
	float n_out2p4;
	vec3 n_out2p5;
	{
		vec4 heightMapValues = getHeightmap(UV, terrainUvScale, terrainHeightMap, terrainCurrentLodLevel);
		float height = getHeight(heightMapValues);
		vec3 position = getPosition(terrainChunkSize, terrainCurrentLodLevel, terrainNeighborLodLevel, terrainSmoothing, terrainNextLodChunkSize, COLOR, UV);
		vec3 normal = getNormal(heightMapValues);
		position.y = height;
		n_out2p0 = position;
		n_out2p1 = height;
		n_out2p2 = normal;
		n_out2p3 = heightMapValues.r;
		n_out2p4 = heightMapValues.g;
		vec2 newUV = vec2(position.x, position.z) * (1.0f / terrainChunkSize) + terrainUvOffset;
		n_out2p5 = vec3(newUV.x, newUV.y, 0.0);
	}

// Output:0
	VERTEX = n_out2p0;
	NORMAL = n_out2p2;

}

void fragment() {
// UVMultiply3D:46
	vec3 n_in46p0 = vec3(10.00000, 10.00000, 0.00000);
	vec3 n_out46p0;
	{
		vec2 scaled = UV * vec2(n_in46p0.x, n_in46p0.y);
		n_out46p0 = vec3(scaled.x, scaled.y, 0f);
	}

// AntiTiling3D:60
	float n_in60p6 = 0.50000;
	float n_in60p7 = 1.00000;
	float n_in60p8 = 0.00000;
	mat4 n_out60p0;
	mat4 n_out60p1;
	{
		vec4 colorMap = texture(Layer0, n_out46p0.xy);
		vec4 dispMap = texture(Layer0_Dis,  n_out46p0.xy);
		vec4 normalMap = texture(Layer0_Normal,  n_out46p0.xy);
		vec4 roughMap = texture(Layer0_Roughnes,  n_out46p0.xy);
		vec4 aoMap = texture(Layer0_AO,  n_out46p0.xy);
		mat4 packedOriginal = mat4(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0));
		packedOriginal[0].rgb = colorMap.rgb;
		packedOriginal[1].r = dispMap.r;
		packedOriginal[2].rg = normalMap.rg;
		packedOriginal[3].rg = roughMap.rg;
		packedOriginal[3].b = aoMap.r;
		n_out60p1 = packedOriginal;
		vec2 newUv = rotatedUV(n_out46p0.xy, n_in60p7, n_in60p6);vec4 colorMapRot = texture(Layer0, newUv);
		vec4 dispMapRot = texture(Layer0_Dis,  newUv);
		vec4 normalMapRot = texture(Layer0_Normal,  newUv);
		vec4 roughMapRot = texture(Layer0_Roughnes,  newUv);
		vec4 aoMapRot = texture(Layer0_AO,  newUv);
		mat4 packedMixed = mat4(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0));
		packedMixed[0].rgb = colorMapRot.rgb;
		packedMixed[1].r = dispMapRot.r;
		packedMixed[2].rg = normalMapRot.rg;
		packedMixed[3].rg = roughMapRot.rg;
		packedMixed[3].b = aoMapRot.r;
		packedMixed[0] = mix(packedOriginal[0], packedMixed[0],  n_in60p8);
		packedMixed[1] = mix(packedOriginal[1], packedMixed[1],  n_in60p8);
		packedMixed[2] = mix(packedOriginal[2], packedMixed[2],  n_in60p8);
		packedMixed[3] = mix(packedOriginal[3], packedMixed[3],  n_in60p8);
		n_out60p1 = packedOriginal;
		n_out60p0 = packedMixed;
	}

// UVMultiply3D:51
	vec3 n_in51p0 = vec3(20.00000, 20.00000, 0.00000);
	vec3 n_out51p0;
	{
		vec2 scaled = UV * vec2(n_in51p0.x, n_in51p0.y);
		n_out51p0 = vec3(scaled.x, scaled.y, 0f);
	}

// AntiTiling3D:62
	float n_in62p6 = 0.50000;
	float n_in62p7 = 1.00000;
	float n_in62p8 = 0.00000;
	mat4 n_out62p0;
	mat4 n_out62p1;
	{
		vec4 colorMap = texture(Layer1, n_out51p0.xy);
		vec4 dispMap = texture(Layer1_Disp,  n_out51p0.xy);
		vec4 normalMap = texture(Layer1_Normal,  n_out51p0.xy);
		vec4 roughMap = texture(Layer1_Roughness,  n_out51p0.xy);
		vec4 aoMap = texture(Layer1_AO,  n_out51p0.xy);
		mat4 packedOriginal = mat4(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0));
		packedOriginal[0].rgb = colorMap.rgb;
		packedOriginal[1].r = dispMap.r;
		packedOriginal[2].rg = normalMap.rg;
		packedOriginal[3].rg = roughMap.rg;
		packedOriginal[3].b = aoMap.r;
		n_out62p1 = packedOriginal;
		vec2 newUv = rotatedUV(n_out51p0.xy, n_in62p7, n_in62p6);vec4 colorMapRot = texture(Layer1, newUv);
		vec4 dispMapRot = texture(Layer1_Disp,  newUv);
		vec4 normalMapRot = texture(Layer1_Normal,  newUv);
		vec4 roughMapRot = texture(Layer1_Roughness,  newUv);
		vec4 aoMapRot = texture(Layer1_AO,  newUv);
		mat4 packedMixed = mat4(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0));
		packedMixed[0].rgb = colorMapRot.rgb;
		packedMixed[1].r = dispMapRot.r;
		packedMixed[2].rg = normalMapRot.rg;
		packedMixed[3].rg = roughMapRot.rg;
		packedMixed[3].b = aoMapRot.r;
		packedMixed[0] = mix(packedOriginal[0], packedMixed[0],  n_in62p8);
		packedMixed[1] = mix(packedOriginal[1], packedMixed[1],  n_in62p8);
		packedMixed[2] = mix(packedOriginal[2], packedMixed[2],  n_in62p8);
		packedMixed[3] = mix(packedOriginal[3], packedMixed[3],  n_in62p8);
		n_out62p1 = packedOriginal;
		n_out62p0 = packedMixed;
	}

// SplatmapHeight3D:59
	float n_out59p0;
	float n_out59p1;
	float n_out59p2;
	float n_out59p3;
	float n_out59p4;
	float n_out59p5;
	float n_out59p6;
	float n_out59p7;
	{
		vec4 splatmap1Values = getSplatmap(UV, terrainUvScale, terrainSplatmap1, terrainCurrentLodLevel);
		vec4 splatmap2Values = getSplatmap(UV, terrainUvScale, terrainSplatmap2, terrainCurrentLodLevel);
		n_out59p0 = splatmap1Values.r;
		n_out59p1 = splatmap1Values.g;
		n_out59p2 = splatmap1Values.b;
		n_out59p3 = splatmap1Values.a;
		n_out59p4 = splatmap2Values.r;
		n_out59p5 = splatmap2Values.g;
		n_out59p6 = splatmap2Values.b;
		n_out59p7 = splatmap2Values.a;
	}

// DepthBlending3D:58
	float n_in58p3 = 0.05000;
	bool n_in58p4 = false;
	mat4 n_out58p0;
	{
		vec3 tex1 = n_out60p0[0].rgb;
		vec3 tex2 = n_out62p0[0].rgb;
		float avg1 = (tex1.r + tex1.g + tex1.b) / 3.0f;
		float avg2 = (tex2.r + tex2.g + tex2.b) / 3.0f;
		if(n_in58p4 == false) { 
			avg1 = n_out60p0[1].r;
			avg2 = n_out62p0[1].r;
		}
		mat4 result = mat4(vec4(0f,0f,0f,0f),vec4(0f,0f,0f,0f),vec4(0f,0f,0f,0f),vec4(0f,0f,0f,0f));
		result[0].rgb = HeightLerp(n_in58p3, n_out60p0[0].rgb, avg1, n_out62p0[0].rgb, avg2, n_out59p2);
		result[1].rgb = HeightLerp(n_in58p3, n_out60p0[1].rgb, avg1, n_out62p0[1].rgb, avg2, n_out59p2);
		result[2].rgb = HeightLerp(n_in58p3, n_out60p0[2].rgb, avg1, n_out62p0[2].rgb, avg2, n_out59p2);
		result[3].rgb = HeightLerp(n_in58p3, n_out60p0[3].rgb, avg1, n_out62p0[3].rgb, avg2, n_out59p2);
		n_out58p0 = result;
	}

// UVMultiply3D:69
	vec3 n_in69p0 = vec3(20.00000, 20.00000, 0.00000);
	vec3 n_out69p0;
	{
		vec2 scaled = UV * vec2(n_in69p0.x, n_in69p0.y);
		n_out69p0 = vec3(scaled.x, scaled.y, 0f);
	}

// AntiTiling3D:70
	float n_in70p6 = 0.50000;
	float n_in70p7 = 1.00000;
	float n_in70p8 = 0.00000;
	mat4 n_out70p0;
	mat4 n_out70p1;
	{
		vec4 colorMap = texture(Layer3, n_out69p0.xy);
		vec4 dispMap = texture(Layer2_Dis2,  n_out69p0.xy);
		vec4 normalMap = texture(Layer2_Normal2,  n_out69p0.xy);
		vec4 roughMap = texture(Layer2_Roughnes2,  n_out69p0.xy);
		vec4 aoMap = texture(Layer2_AO,  n_out69p0.xy);
		mat4 packedOriginal = mat4(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0));
		packedOriginal[0].rgb = colorMap.rgb;
		packedOriginal[1].r = dispMap.r;
		packedOriginal[2].rg = normalMap.rg;
		packedOriginal[3].rg = roughMap.rg;
		packedOriginal[3].b = aoMap.r;
		n_out70p1 = packedOriginal;
		vec2 newUv = rotatedUV(n_out69p0.xy, n_in70p7, n_in70p6);vec4 colorMapRot = texture(Layer3, newUv);
		vec4 dispMapRot = texture(Layer2_Dis2,  newUv);
		vec4 normalMapRot = texture(Layer2_Normal2,  newUv);
		vec4 roughMapRot = texture(Layer2_Roughnes2,  newUv);
		vec4 aoMapRot = texture(Layer2_AO,  newUv);
		mat4 packedMixed = mat4(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0));
		packedMixed[0].rgb = colorMapRot.rgb;
		packedMixed[1].r = dispMapRot.r;
		packedMixed[2].rg = normalMapRot.rg;
		packedMixed[3].rg = roughMapRot.rg;
		packedMixed[3].b = aoMapRot.r;
		packedMixed[0] = mix(packedOriginal[0], packedMixed[0],  n_in70p8);
		packedMixed[1] = mix(packedOriginal[1], packedMixed[1],  n_in70p8);
		packedMixed[2] = mix(packedOriginal[2], packedMixed[2],  n_in70p8);
		packedMixed[3] = mix(packedOriginal[3], packedMixed[3],  n_in70p8);
		n_out70p1 = packedOriginal;
		n_out70p0 = packedMixed;
	}

// DepthBlending3D:76
	float n_in76p3 = 0.05000;
	bool n_in76p4 = false;
	mat4 n_out76p0;
	{
		vec3 tex1 = n_out58p0[0].rgb;
		vec3 tex2 = n_out70p0[0].rgb;
		float avg1 = (tex1.r + tex1.g + tex1.b) / 3.0f;
		float avg2 = (tex2.r + tex2.g + tex2.b) / 3.0f;
		if(n_in76p4 == false) { 
			avg1 = n_out58p0[1].r;
			avg2 = n_out70p0[1].r;
		}
		mat4 result = mat4(vec4(0f,0f,0f,0f),vec4(0f,0f,0f,0f),vec4(0f,0f,0f,0f),vec4(0f,0f,0f,0f));
		result[0].rgb = HeightLerp(n_in76p3, n_out58p0[0].rgb, avg1, n_out70p0[0].rgb, avg2, n_out59p1);
		result[1].rgb = HeightLerp(n_in76p3, n_out58p0[1].rgb, avg1, n_out70p0[1].rgb, avg2, n_out59p1);
		result[2].rgb = HeightLerp(n_in76p3, n_out58p0[2].rgb, avg1, n_out70p0[2].rgb, avg2, n_out59p1);
		result[3].rgb = HeightLerp(n_in76p3, n_out58p0[3].rgb, avg1, n_out70p0[3].rgb, avg2, n_out59p1);
		n_out76p0 = result;
	}

// TextureUnpack3D:57
	vec3 n_out57p0;
	float n_out57p1;
	vec3 n_out57p2;
	vec3 n_out57p3;
	float n_out57p4;
	{
		n_out57p0 = n_out76p0[0].rgb;
		n_out57p1 = n_out76p0[1].r;
		n_out57p2 = vec3(n_out76p0[2].r, n_out76p0[2].g, 0f);
		n_out57p3 = vec3(n_out76p0[3].r, n_out76p0[3].g, 0f);
		n_out57p4 = n_out76p0[3].b;
	}

// VectorDecompose:63
	float n_out63p0 = n_out57p3.x;
	float n_out63p1 = n_out57p3.y;
	float n_out63p2 = n_out57p3.z;

// FloatOp:78
	float n_in78p1 = 1.80000;
	float n_out78p0 = n_out63p0 * n_in78p1;

// TerrainMaterial3D:77
	vec3 n_out77p0;
	vec3 n_out77p1;
	{
		vec4 material = texture(terrainDefaultMaterial, UV);
		n_out77p0 = genInspectorHighliteTerrain(BrushColor, BrushData0, BrushData1, CAMERA_MATRIX, VERTEX);
		n_out77p1 = material.rgb;
	}

// ScalarFloat:79
	float n_out79p0 = 1.200000;

// Output:0
	ALBEDO = n_out57p0;
	ROUGHNESS = n_out78p0;
	EMISSION = n_out77p0;
	AO = n_out57p4;
	NORMAL_MAP = n_out57p2;
	NORMAL_MAP_DEPTH = n_out79p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -2103.83, -1762.64 )
version = "4.0"
modes/depth_draw = 1
nodes/vertex/0/position = Vector2( -820, -640 )
nodes/vertex/2/node = SubResource( 34 )
nodes/vertex/2/position = Vector2( -1200, -640 )
nodes/vertex/connections = PackedInt32Array( 2, 0, 0, 0, 2, 2, 0, 1 )
nodes/fragment/0/position = Vector2( 340, -1260 )
nodes/fragment/2/node = SubResource( 4 )
nodes/fragment/2/position = Vector2( -1260, -1220 )
nodes/fragment/3/node = SubResource( 7 )
nodes/fragment/3/position = Vector2( -900, -1220 )
nodes/fragment/4/node = SubResource( 10 )
nodes/fragment/4/position = Vector2( -740, -1220 )
nodes/fragment/5/node = SubResource( 15 )
nodes/fragment/5/position = Vector2( -1600, -840 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -320, 880 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -640, 900 )
nodes/fragment/14/node = SubResource( 3 )
nodes/fragment/14/position = Vector2( 180, 1000 )
nodes/fragment/28/node = SubResource( 5 )
nodes/fragment/28/position = Vector2( -1080, -1220 )
nodes/fragment/29/node = SubResource( 6 )
nodes/fragment/29/position = Vector2( -1380, -840 )
nodes/fragment/30/node = SubResource( 8 )
nodes/fragment/30/position = Vector2( 0, 1160 )
nodes/fragment/39/node = SubResource( 9 )
nodes/fragment/39/position = Vector2( -920, 900 )
nodes/fragment/46/node = SubResource( 11 )
nodes/fragment/46/position = Vector2( -1320, -920 )
nodes/fragment/47/node = SubResource( 12 )
nodes/fragment/47/position = Vector2( -1420, -1220 )
nodes/fragment/48/node = SubResource( 13 )
nodes/fragment/48/position = Vector2( -1200, -840 )
nodes/fragment/49/node = SubResource( 14 )
nodes/fragment/49/position = Vector2( -1600, -540 )
nodes/fragment/50/node = SubResource( 16 )
nodes/fragment/50/position = Vector2( -1400, -540 )
nodes/fragment/51/node = SubResource( 17 )
nodes/fragment/51/position = Vector2( -1600, -620 )
nodes/fragment/57/node = SubResource( 18 )
nodes/fragment/57/position = Vector2( -100, -900 )
nodes/fragment/58/node = SubResource( 19 )
nodes/fragment/58/position = Vector2( -320, -960 )
nodes/fragment/59/node = SubResource( 20 )
nodes/fragment/59/position = Vector2( -460, -800 )
nodes/fragment/60/node = SubResource( 21 )
nodes/fragment/60/position = Vector2( -780, -1000 )
nodes/fragment/62/node = SubResource( 22 )
nodes/fragment/62/position = Vector2( -740, -880 )
nodes/fragment/63/node = SubResource( 23 )
nodes/fragment/63/position = Vector2( -40, -1080 )
nodes/fragment/69/node = SubResource( 24 )
nodes/fragment/69/position = Vector2( -980, -20 )
nodes/fragment/70/node = SubResource( 25 )
nodes/fragment/70/position = Vector2( -740, -200 )
nodes/fragment/71/node = SubResource( 26 )
nodes/fragment/71/position = Vector2( -1620, -260 )
nodes/fragment/72/node = SubResource( 27 )
nodes/fragment/72/position = Vector2( -1400, -240 )
nodes/fragment/73/node = SubResource( 28 )
nodes/fragment/73/position = Vector2( -1200, -240 )
nodes/fragment/74/node = SubResource( 29 )
nodes/fragment/74/position = Vector2( -1600, -20 )
nodes/fragment/75/node = SubResource( 30 )
nodes/fragment/75/position = Vector2( -1400, -20 )
nodes/fragment/76/node = SubResource( 31 )
nodes/fragment/76/position = Vector2( -200, -680 )
nodes/fragment/77/node = SubResource( 32 )
nodes/fragment/77/position = Vector2( 140, -1340 )
nodes/fragment/78/node = SubResource( 33 )
nodes/fragment/78/position = Vector2( 180, -1160 )
nodes/fragment/79/node = SubResource( 36 )
nodes/fragment/79/position = Vector2( 240, -740 )
nodes/fragment/connections = PackedInt32Array( 59, 2, 58, 2, 2, 2, 60, 0, 47, 2, 60, 4, 28, 2, 60, 2, 3, 2, 60, 1, 4, 2, 60, 3, 60, 0, 58, 0, 46, 0, 60, 5, 51, 0, 62, 5, 5, 2, 62, 0, 29, 2, 62, 1, 48, 2, 62, 2, 49, 2, 62, 3, 50, 2, 62, 4, 57, 0, 0, 0, 62, 0, 58, 1, 57, 2, 0, 8, 57, 3, 63, 0, 69, 0, 70, 5, 71, 2, 70, 0, 72, 2, 70, 1, 73, 2, 70, 2, 74, 2, 70, 3, 75, 2, 70, 4, 70, 0, 76, 1, 59, 1, 76, 2, 76, 0, 57, 0, 58, 0, 76, 0, 77, 0, 0, 5, 57, 4, 0, 6, 63, 0, 78, 0, 78, 0, 0, 3, 79, 0, 0, 9 )

[resource]
shader = SubResource( 35 )
shader_param/terrainUvScale = null
shader_param/terrainUvOffset = null
shader_param/terrainChunkSize = null
shader_param/terrainNextLodChunkSize = null
shader_param/terrainNeighborLodLevel = null
shader_param/terrainCurrentLodLevel = null
shader_param/terrainSmoothing = null
shader_param/terrainSplatMapDebug = null
shader_param/BrushData0 = null
shader_param/BrushData1 = null
shader_param/BrushColor = null
shader_param/Layer0 = ExtResource( 7 )
shader_param/Layer0_Dis = ExtResource( 8 )
shader_param/Layer0_Normal = ExtResource( 9 )
shader_param/Layer0_Roughnes = ExtResource( 11 )
shader_param/Layer0_AO = ExtResource( 10 )
shader_param/Layer1 = ExtResource( 13 )
shader_param/Layer1_Disp = ExtResource( 14 )
shader_param/Layer1_Normal = ExtResource( 12 )
shader_param/Layer1_Roughness = ExtResource( 17 )
shader_param/Layer1_AO = ExtResource( 15 )
shader_param/Layer3 = ExtResource( 18 )
shader_param/Layer2_Dis2 = ExtResource( 2 )
shader_param/Layer2_Normal2 = ExtResource( 19 )
shader_param/Layer2_Roughnes2 = ExtResource( 21 )
shader_param/Layer2_AO = ExtResource( 20 )
